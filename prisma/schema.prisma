// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                		String       @id @default(auto()) @map("_id") @db.ObjectId
  accountId         		String    	 @unique
  available         		Int?
  current           		Int
  isoCurrencyCode   		String
  limit             		Int?
  unofficialCurrencyCode 	String?
  mask              		String
  name              		String
  officialName      		String?
  subtype           		String
  type              		String
}

// model Transaction{
// 	id                 ObjectId            @id @map("_id") @db.ObjectId
// 	transactionId	   BigInt		       @map("TransactionID")
// 	symbol			   String				
// 	date 			   DateTime 		   @map("Date")
// 	name			   String
// 	amount 		 	   Float 		       @map("Amount")
// 	category 		   Category[]  	       @relation(references: [name]){ name }

// }
// model CreditCard {
// 	id				  String   @id @default(auto()) @map("_id") @db.ObjectId
// 	userId       	  String   @db.ObjectId
// 	bank			  String
// 	cardNumber		  Int
	
// }

// Necessary for Next auth
// model Account {
//     id                String  @id @default(auto()) @map("_id") @db.ObjectId
//     userId            String  @db.ObjectId
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }





// model Session {
//     id           String   @id @default(auto()) @map("_id") @db.ObjectId
//     sessionToken String   @unique
//     userId       String   @db.ObjectId
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//     @@map("sessions")
// }

// model User {
//     id            String    @id @default(auto()) @map("_id") @db.ObjectId
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     @@map("users")
// }

// model VerificationToken {
//   id              String      @id @default(auto()) @map("_id") @db.ObjectId
//   identifier      String
//   token           String      @unique
//   expires         DateTime    @map("expiresAt")
//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }
